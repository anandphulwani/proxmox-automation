- name: "Declare all variables"
  set_fact:
    file_sno_type_prefix: "{{ '%02d' | format(pretask_taskandtaskcondition_message_sno | int) }}-Task:"
    section_name: "`Hostname`"
    old_hostname_from_hostname_command: null
    old_hostname_from_hosts_file: null
    current_hostname_result: null
    current_hostname: null
  changed_when: false

- name: "{{ file_sno_type_prefix }} 001: {{ section_name }}, Backup current `/etc/hostname`"
  shell: mkdir -p /root/proxmox_automation_install/backups/etc/ && cp /etc/hostname /root/proxmox_automation_install/backups/etc/hostname_$(date +%Y%m%d-%H%M%S)
  failed_when: false

- name: "{{ file_sno_type_prefix }} 002: {{ section_name }}, Backup current `/etc/hosts`"
  shell: mkdir -p /root/proxmox_automation_install/backups/etc/ && cp /etc/hosts /root/proxmox_automation_install/backups/etc/hosts_$(date +%Y%m%d-%H%M%S)
  failed_when: false

- name: "{{ file_sno_type_prefix }} 003: {{ section_name }}, Get the machine old hostname"
  command: hostname
  register: old_hostname_from_hostname_command
  changed_when: false
  failed_when: false

- name: "{{ file_sno_type_prefix }} 004: {{ section_name }}, Update `/etc/hostname`"
  copy:
    content: "{{ hostname }}\n"
    dest: /etc/hostname

- name: "{{ file_sno_type_prefix }} 005: {{ section_name }}, Get the current hostname from `/etc/hosts`"
  command:
    cmd: awk '/127.0.1.1/ {print $2}' /etc/hosts
  register: old_hostname_from_hosts_file
  changed_when: false
  failed_when: false

- name: "{{ file_sno_type_prefix }} 006: {{ section_name }}, Replace old hostname from hostname command with new hostname in `/etc/hosts`"
  replace:
    path: /etc/hosts
    regexp: " {{ old_hostname_from_hostname_command.stdout }}$"
    replace: " {{ hostname }}"

- name: "{{ file_sno_type_prefix }} 007: {{ section_name }}, Replace old hostname from hosts file with new hostname in `/etc/hosts`"
  replace:
    path: /etc/hosts
    regexp: " {{ old_hostname_from_hosts_file.stdout }}$"
    replace: " {{ hostname }}"

- name: "{{ file_sno_type_prefix }} 008: {{ section_name }}, Set hostname using the hostname module"
  hostname:
    name: "{{ hostname }}"

- name: "{{ file_sno_type_prefix }} 009: {{ section_name }}, Restart `networking` using `ifreload -a`"
  shell: ifreload -a
  changed_when: false

- name: "{{ file_sno_type_prefix }} 010: {{ section_name }}, Get the machine new hostname"
  command: hostname
  register: current_hostname_result
  changed_when: false
  failed_when: false

- name: "{{ file_sno_type_prefix }} 011: {{ section_name }}, Set the `current_hostname` from `current_hostname_result`"
  set_fact:
    current_hostname: "{{ current_hostname_result.stdout }}"

- name: "{{ file_sno_type_prefix }} 012: {{ section_name }}, Fail if hostname hasnt changed"
  fail:
    msg: "Unable to set `hostname` to {{ hostname }}."
  when: current_hostname != hostname

- name: "{{ file_sno_type_prefix }} 013: {{ section_name }}, Reboot the server"
  reboot:
    msg: "Reboot initiated by `Hostname.yml`"
    reboot_timeout: 600

- name: "{{ file_sno_type_prefix }} 014: {{ section_name }}, Check if folder with new hostname exists in /etc/pve/nodes"
  stat:
    path: "/etc/pve/nodes/{{ hostname }}"
  register: new_hostname_node_dir

- name: "{{ file_sno_type_prefix }} 015: {{ section_name }}, Fail if new hostname folder not found in /etc/pve/nodes"
  fail:
    msg: "New hostname folder `/etc/pve/nodes/{{ hostname }}` not found."
  when: not new_hostname_node_dir.stat.exists

- name: "{{ file_sno_type_prefix }} 016: {{ section_name }}, Check if folder with old hostname exists in /etc/pve/nodes"
  stat:
    path: "/etc/pve/nodes/{{ old_hostname_from_hostname_command.stdout }}"
  register: old_hostname_node_dir

- name: "{{ file_sno_type_prefix }} 017: {{ section_name }}, Fail if old hostname folder not found in /etc/pve/nodes"
  fail:
    msg: "Old hostname folder `/etc/pve/nodes/{{ old_hostname_from_hostname_command.stdout }}` not found."
  when: not old_hostname_node_dir.stat.exists

- name: "{{ file_sno_type_prefix }} 018: {{ section_name }}, Archive old hostname folder and move to backup"
  shell: |
    mkdir -p /root/proxmox_automation_install/backups/etc/pve/nodes/
    tar czf /root/proxmox_automation_install/backups/etc/pve/nodes/{{ old_hostname_from_hostname_command.stdout }}_$(date +%Y%m%d-%H%M%S).tar.gz -C /etc/pve/nodes {{ old_hostname_from_hostname_command.stdout }}
    rm -rf /etc/pve/nodes/{{ old_hostname_from_hostname_command.stdout }}
  args:
    executable: /bin/bash
  register: archive_old_node_dir
  failed_when: archive_old_node_dir.rc != 0

- name: "{{ file_sno_type_prefix }} 019: {{ section_name }}, Check if /etc/mdadm/mdadm.conf exists"
  stat:
    path: /etc/mdadm/mdadm.conf
  register: mdadm_conf_file

- name: "{{ file_sno_type_prefix }} 020: {{ section_name }}, Check if old hostname followed by ':' exists in mdadm.conf"
  shell: grep -q "{{ old_hostname_from_hostname_command.stdout }}:" /etc/mdadm/mdadm.conf
  register: old_hostname_in_mdadm
  failed_when: false
  changed_when: false
  when: mdadm_conf_file.stat.exists

- name: "{{ file_sno_type_prefix }} 021: {{ section_name }}, Replace old hostname: with new hostname: in mdadm.conf"
  replace:
    path: /etc/mdadm/mdadm.conf
    regexp: '\b{{ old_hostname_from_hostname_command.stdout }}:'
    replace: '{{ hostname }}:'
  when:
    - mdadm_conf_file.stat.exists
    - old_hostname_in_mdadm.rc == 0
