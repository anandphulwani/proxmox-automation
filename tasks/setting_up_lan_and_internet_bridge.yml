- name: "Declare all variables"
  set_fact:
    file_sno_type_prefix: "{{ '%02d' | format(pretask_taskandtaskcondition_message_sno | int) }}-Task:"
    section_name: "`Setting up LAN and Internet Bridge`"
  changed_when: false

- name: "{{ file_sno_type_prefix }} 001: {{ section_name }}, Added values to `DHCP range` for DHCP"
  replace:
    path: /etc/dnsmasq.conf
    regexp: "\
      #\\s*\
      dhcp-range\\s*=\\s*\
      (?:\
        (?:\
          (?:\
            \\d{1,3}\\.\
          ){3}\\d{1,3}\
        ),\
      ){3}\
      \\d{1,3}h"
    replace: "dhcp-range={{ dhcp_range_from }},{{ dhcp_range_to }},{{ subnet_mask }},6h"

- name: "{{ file_sno_type_prefix }} 002: {{ section_name }}, Added values to `default gateway` for DHCP"
  replace:
    path: /etc/dnsmasq.conf
    regexp: "\
      #\\s*\
      dhcp-option\\s*=\\s*\
      3\\s*,\\s*\
      (?:\
        (?:\
          \\d{1,3}\\.\
        ){3}\\d{1,3}\
      )"
    replace: "dhcp-option=3,{{ default_gateway }}"

- name: "{{ file_sno_type_prefix }} 003: {{ section_name }}, Added values to `DNS servers` for DHCP"
  lineinfile:
    path: "/etc/dnsmasq.conf"
    regexp: '^\s*#\s*dhcp-option\s*=\s*6\s*,\s*=.*$'
    line: 'dhcp-option=6,{{ dns_server_01 }},{{ dns_server_02 }}'
    state: present
    insertafter: EOF

- name: "{{ file_sno_type_prefix }} 004: {{ section_name }}, Modify `/etc/network/interfaces` to add `vmbr0B_LANnInt`"
  replace:
    path: /etc/network/interfaces
    regexp: "\
      (\
      auto vmbr0B_LANnInt\\n\
      iface vmbr0B_LANnInt .*\\n\
      )\
      (\
        (?!\taddress )\
        [\\s\\S]*?\
      )\
      (\\n\\s*\\n)\
      "
    replace: "\
      auto vmbr0B_LANnInt\n\
      iface vmbr0B_LANnInt inet static\n\
      \taddress {{ default_gateway }}\n\
      \tnetmask {{ subnet_mask }}\n\
      \\2\n\
      \t# LAN and Internet connection\n\
      \\3"

- name: "{{ file_sno_type_prefix }} 005: {{ section_name }}, Create `dhcp_static_mappings_generator.sh` file and append content to it"
  copy:
    dest: "/usr/local/bin/dhcp_static_mappings_generator.sh"
    content: |
      {% raw %}#!/bin/bash

      # This script updates the DHCP static lease entries in `/etc/dnsmasq.conf` for Proxmox virtual machines (VMs)
      # whose configurations have changed since the last update of the `dnsmasq` configuration.
      #
      # **Usage**: `./script_name.sh <ip_ranges_with_subnet_prefix>`
      #
      # **Purpose**:
      # The script automates the management of static IP assignments for VMs by parsing their configuration files,
      # extracting network interface MAC addresses, and generating corresponding `dhcp-host` entries in `dnsmasq.conf`.
      # This ensures that VMs consistently receive the same IP addresses based on their configurations.
      #
      # **Workflow**:
      # 01. **Argument Check**: Verifies that the `<ip_ranges_with_subnet_prefix>` argument is provided, which should be one of:
      #    - `10.0.0.0/8`
      #    - `172.16.0.0/16`
      #    - `192.168.0.0/16`
      #    If an invalid range is provided, the script exits with an error message.
      #
      # 02. **Identify Changed VM Configurations**: Finds VM configuration files in `/etc/pve/qemu-server` that have been modified more recently than `/etc/dnsmasq.conf`.
      #
      # 03: Flush existing DHCP leases
      # 
      # 04. **Initialize Data Structures**: Sets up an associative array to track unique MAC addresses and an array to store new DHCP entries.
      #
      # 05. **Process Each Changed VM Configuration**:
      #    - Extracts the VMID from the configuration file name.
      #    - Parses network interface definitions to extract unique MAC addresses.
      #    - **IP Address Construction**:
      #      - For `/8` subnet (e.g., `10.0.0.0/8`):
      #        Constructs IP addresses using the pattern: `<first_block_ip>.<first_digit_of_VMID>.<last_two_digits_of_VMID>.<interface_order>`.
      #        For example, with `first_block_ip=10` and `VMID=101`, the IP might be `10.1.01.1`.
      #      - For `/16` subnet (e.g., `172.16.0.0/16` or `192.168.0.0/16`):
      #        Constructs IP addresses using the pattern: `<first_block_ip>.<second_block_ip>.<first_two_digits_of_VMID>.<last_digits_of_VMID><interface_order>`.
      #        For example, with `first_block_ip=172`, `second_block_ip=16`, and `VMID=568`, the IP might be `172.16.56.81`.
      #    - Builds `dhcp-host` entries linking each MAC address to its generated IP address.
      #
      # 06. **Remove Old Static Leases**: Cleans up outdated `dhcp-host` entries in `/etc/dnsmasq.conf` for the changed VMs to prevent duplicates.
      #
      # 07. **Generate New DHCP Entries**: Compiles the new `dhcp-host` lines into a variable for insertion.
      #
      # 08. **Update dnsmasq Configuration**: Inserts the new DHCP entries into `/etc/dnsmasq.conf` under the `# DHCP Static leases` section.
      #
      # **Outcome**:
      # - VMs receive consistent and predictable IP addresses based on their VMIDs and network interface order.
      # - The `dnsmasq` service has an updated configuration that reflects the current state of VM network interfaces.
      # - Simplifies network management in virtualized environments by automating IP assignment tasks.

      # Step 01: Check if the ip_ranges_with_subnet_prefix argument is passed
      if [ -z "$1" ]; then
          echo "Usage: $0 <ip_ranges_with_subnet_prefix>"
          exit 1
      fi
      ip_ranges_with_subnet_prefix="$1"
      # echo "Input argument: $ip_ranges_with_subnet_prefix"

      # Validate the input
      if [[ "$ip_ranges_with_subnet_prefix" != "10.0.0.0/8" && "$ip_ranges_with_subnet_prefix" != "172.16.0.0/16" && "$ip_ranges_with_subnet_prefix" != "192.168.0.0/16" ]]; then
          echo "Invalid IP range with subnet prefix. Allowed values are 10.0.0.0/8, 172.16.0.0/16, or 192.168.0.0/16"
          exit 1
      fi

      # Extract the first and second block IPs and subnet prefix
      IFS='/' read -r ip_range subnet_prefix <<< "$ip_ranges_with_subnet_prefix"
      IFS='.' read -r first_block_ip second_block_ip _ _ <<< "$ip_range"
      
      # echo "Parsed IP range: $ip_range, Subnet prefix: $subnet_prefix"
      # echo "First block IP: $first_block_ip, Second block IP: $second_block_ip"

      while true; do
        # Step 02: Find VM configuration files newer than /etc/dnsmasq.conf
        changed_files=( $(find -L /etc/pve/qemu-server -type f -name '*.conf' -newer /etc/dnsmasq.conf | sort) )
        # echo "Found ${#changed_files[@]} changed configuration files."

        if [ ${#changed_files[@]} -eq 0 ]; then
            # echo "No updated config files found. Sleeping for 10 seconds..."
            sleep 10
            continue
        fi

        # Step 03: Flush existing leases
        LEASE_FILE="/var/lib/misc/dnsmasq.leases"
        if [ -f "$LEASE_FILE" ]; then
            : > "$LEASE_FILE"         # truncate the file
            echo "Cleared $LEASE_FILE"
        fi

        # Step 04: Initialize associative array and entries list
        unset mac_addresses
        declare -A mac_addresses
        entries=()
        # echo "Initialized mac_addresses map and entries array."

        # Step 05: Process each changed VM configuration file
        for conf_file in "${changed_files[@]}"; do
            # echo "Processing file: $conf_file"
            order_no=1
            vmid=$(basename "$conf_file" .conf)
            # echo "VMID: $vmid"

            # Extract digits from VMID based on subnet prefix
            if [[ "$subnet_prefix" == "8" ]]; then
                part1=${vmid:0:1}
                part2=${vmid:1:2}
            else
                part1=${vmid:0:2}
                part2=${vmid:2}
            fi
            
            # Use grep to extract all matching lines, and then sort them
            matching_lines=$(grep -E '^net[0-9]{1,4}:[^=]*=\s*([^,]*),.*' "$conf_file" | sort)
            # echo "Matching lines from $conf_file:"
            # echo "$matching_lines"

            # Filter out duplicates by MAC address first
            unique_lines=()
            while IFS= read -r line; do
                if [[ $line =~ ^(net[0-9]{1,4}):[^=]*=\s*([^,]*),.* ]]; then
                    mac="${BASH_REMATCH[2]}"

                    # Only process unique MAC addresses
                    if [[ -n "$mac" && -z "${mac_addresses[$mac]}" ]]; then
                        mac_addresses["$mac"]=1
                        unique_lines+=("$line")
                        # echo "Added unique MAC: $mac from line: $line"
                    fi
                fi
            done <<< "$matching_lines"

            # Process the unique lines
            for line in "${unique_lines[@]}"; do
                if [[ $line =~ ^(net[0-9]{1,4}):[^=]*=\s*([^,]*),.* ]]; then
                    net_number="${BASH_REMATCH[1]}"
                    mac="${BASH_REMATCH[2]}"
                    net_num_only="${net_number#net}"

                    entries+=("$net_num_only|$mac|$part1|$part2|$order_no|$vmid")
                    # echo "Generated entry: net_num=$net_num_only, mac=$mac, order_no=$order_no, vmid=$vmid"
                    ((order_no++))
                fi
            done
        done

        # Step 06: Modify /etc/dnsmasq.conf to remove old static leases for each changed VM
        for conf_file in "${changed_files[@]}"; do
            vmid=$(basename "$conf_file" .conf)
            # echo "Removing old static leases for VMID: $vmid"
            sed -i '/# DHCP Static leases/,/^[[:space:]]*$/ {
                /# vmid:'"${vmid}"'/d
            }' /etc/dnsmasq.conf
        done

        # Step 07: Generate dhcp-host lines and store them in a variable
        new_dhcp_hosts=""
        for entry in "${entries[@]}"; do
            IFS='|' read -r net_num_only mac part1 part2 order_no vmid <<< "$entry"
            
            # skip cards beyond the 9th
            if (( order_no > 9 )); then
                # echo "Skipping card $order_no for MAC $mac"
                continue
            fi

            # Strip leading zeros safely (00 becomes 0, 01 becomes 1, etc.)
            part1=$((10#$part1))
            if [[ "$subnet_prefix" == "8" ]]; then
                # Strip leading zeros safely (00 becomes 0, 01 becomes 1, etc.)
                part2=$((10#$part2))
                order_no=$((10#$order_no))
                ip="$first_block_ip.$part1.$part2.$order_no"
            else
                # Strip leading zeros safely (00 becomes 0, 01 becomes 1, etc.)
                part2=$((10#$part2$order_no))
                ip="$first_block_ip.$second_block_ip.$part1.$part2"
            fi

            dhcp_line="dhcp-host=$mac,$ip,3h # vmid:$vmid"
            new_dhcp_hosts+=$'\n'"$dhcp_line"
            # echo "Generated DHCP line: $dhcp_line"
        done

        # Step 08: Insert the new DHCP entries into /etc/dnsmasq.conf
        # echo "Updating /etc/dnsmasq.conf with new static leases..."
        perl -0777 -pi -e 's/(?:(?:(?:[ \t\n]*)# DHCP Static leases)([\s\S]*?))?(?:[ \t\n]*)(\n\n\# Always allocate the host with Ethernet address (?:[A-Fa-f0-9]{2}:?){6}\n# The IP address (?:\d{1,3}\.?){4})/\n\n# DHCP Static leases$1'"$new_dhcp_hosts"'$2/s' /etc/dnsmasq.conf
        
        # Step 09: Restarting networking and dnsmasq
        if command -v systemctl &>/dev/null; then
            # echo "Restarting networking..."
            # systemctl restart networking
        
            echo "Restarting dnsmasq..."
            systemctl restart dnsmasq
        else
            echo "Restarting via init.d scripts..."
            # /etc/init.d/networking restart
            /etc/init.d/dnsmasq restart
        fi

        # echo "Sleeping 10 seconds before next check..."
        sleep 10
      done
      {% endraw %}

- name: "{{ file_sno_type_prefix }} 006: {{ section_name }}, Set execute permission on the script"
  file:
    path: "/usr/local/bin/dhcp_static_mappings_generator.sh"
    owner: root
    group: root
    mode: '0755'
    state: file

- name: "{{ file_sno_type_prefix }} 007: {{ section_name }}, Create systemd service to run script at boot"
  copy:
    dest: /etc/systemd/system/dhcp-static-gen.service
    owner: root
    group: root
    mode: '0644'
    content: |
      [Unit]
      Description=Generate DHCP static mappings at boot
      After=network-online.target
      Wants=network-online.target

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/dhcp_static_mappings_generator.sh '{{ vmbr0B_iprange }}'
      StandardOutput=append:/var/log/dhcp_static_mappings_generator.log
      StandardError=append:/var/log/dhcp_static_mappings_generator.log

      [Install]
      WantedBy=multi-user.target

- name: "{{ file_sno_type_prefix }} 008: {{ section_name }}, Reload systemd"
  command: systemctl daemon-reload

- name: "{{ file_sno_type_prefix }} 009: {{ section_name }}, Enable dhcp-static-gen to run at boot"
  systemd:
    name: dhcp-static-gen.service
    enabled: true

- name: "{{ file_sno_type_prefix }} 010: {{ section_name }}, Restart `dnsmasq` service"
  service:
    name: dnsmasq
    state: restarted

- name: "{{ file_sno_type_prefix }} 011: {{ section_name }}, Restart `networking` service"
  service:
    name: networking
    state: restarted

- name: "{{ file_sno_type_prefix }} 012: {{ section_name }}, Enable and start `nftables` service"
  systemd:
    name: nftables
    enabled: yes
    state: started

- name: "{{ file_sno_type_prefix }} 013: {{ section_name }}, Enable IPv4 forwarding"
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes

- name: "{{ file_sno_type_prefix }} 014: {{ section_name }}, Deploy nftables config with port forwarding rules"
  copy:
    dest: /etc/nftables.conf
    owner: root
    group: root
    mode: '0644'
    content: |
      flush ruleset

      table ip nat {
        chain prerouting {
          type nat hook prerouting priority -100;

          {% set ip_base, subnet_prefix = vmbr0B_iprange.split('/') %}
          {% set ip_blocks = ip_base.split('.') %}
          {% set first_block = ip_blocks[0]|int %}
          {% set second_block = ip_blocks[1]|int if subnet_prefix != '8' else None %}

                    # --- Protect critical Proxmox ports from accidental DNAT ---
                    tcp dport 53 accept    # DNS zone transfers, large replies
                    tcp dport {{ ssh_port_new }} accept          # SSH
                    tcp dport 443 accept          # HTTPS (API access, GUI)
                    tcp dport {{ webgui_port_new }} accept          # Proxmox Web GUI
                    tcp dport 8007 accept          # Proxmox Backup Server
                    tcp dport 3128 accept          # NoVNC proxy
                    tcp dport 3129 accept          # SPICE proxy (optional)
                    tcp dport 5900-5999 accept          # VNC/SPICE consoles

                    udp dport 53 accept          # DNS queries (standard)
                    udp dport 67 accept          # DHCP server (bootps)
                    udp sport 67 accept          # DHCP replies from server
                    udp dport 68 accept          # DHCP client (bootpc)
                    udp sport 68 accept          # DHCP requests from client

          {% for id in range(100, 1000) %}
            {% set id_str = "%03d"|format(id) %}
            {% if subnet_prefix == '8' %}
              {% set part1 = id_str[0]|int %}
              {% set part2 = id_str[1:3]|int %}
              {% set ip = "%d.%d.%d.%d" % (first_block, part1, part2, 1) %}
            {% else %}
              {% set part1 = id_str[0:2]|int %}
              {% set part2 = id_str[2]|int %}
              {% set ip = "%d.%d.%d.%d" % (first_block, second_block, part1, (id_str[2] + "1") | int) %}
            {% endif %}
            {% set rules = {
              8000: 80,
              21000: 21,
              22000: 22,
              33000: 3389,
              36000: 3306,
              48000: 4899,
              54000: 5432,
              59000: 5900,
            } %}

            {% for offset, target_port in rules.items() %}
              tcp dport {{ offset + id }} dnat to {{ ip }}:{{ target_port }}
            {% endfor %}
          {% endfor %}
          {% if subnet_prefix == '8' %}
            {% set dmz_ip = "%d.255.255.254" % (ip_blocks[0] | int) %}
          {% elif subnet_prefix == '16' %}
            {% set dmz_ip = "%d.%d.255.254" % (ip_blocks[0] | int, ip_blocks[1] | int) %}
          {% endif %}

                    # DMZ catch-all: forward all other TCP ports except Proxmox-reserved ones
                    meta l4proto tcp dnat to {{ dmz_ip }}
          
                    # Optional: forward all other UDP ports to DMZ (excluding NTP for example)
                    udp dport != 123 dnat to {{ dmz_ip }}
        }

        chain postrouting {
          type nat hook postrouting priority 100;
          oifname "vmbr0A_mainbrg" masquerade
        }
      }

      table ip filter {
        chain forward {
          type filter hook forward priority 0;
          policy drop;

          # Allow LAN to Internet
          iifname "vmbr0B_LANnInt" oifname "vmbr0A_mainbrg" accept

          # Allow returning traffic from Internet to LAN
          iifname "vmbr0A_mainbrg" oifname "vmbr0B_LANnInt" ct state related,established accept

          # Allow incoming DNAT connections from WAN to LAN
          iifname "vmbr0A_mainbrg" oifname "vmbr0B_LANnInt" ct state new,related,established accept
        }
      }

- name: "{{ file_sno_type_prefix }} 015: {{ section_name }}, Reload nftables to apply new rules"
  command: nft -f /etc/nftables.conf

- name: "{{ file_sno_type_prefix }} 016: {{ section_name }}, Touching checksum file on successful completion"
  shell: "mkdir -p /root/proxmox_automation_install && rm -f /root/proxmox_automation_install/task_setting_up_lan_and_internet_bridge_* && sleep 2 && touch /root/proxmox_automation_install/task_setting_up_lan_and_internet_bridge_$(date +%Y%m%d-%H%M%S).run.tmp"
  changed_when: false

- name: "{{ file_sno_type_prefix }} 017: {{ section_name }}, Reboot the server if `is_condition_post_completion_tasks_and_cleanup` is not defined"
  reboot:
    msg: "Reboot initiated by Ansible for networking `interface` and dnsmasq server installation changes"
    reboot_timeout: 600
  when: 
    - is_condition_post_completion_tasks_and_cleanup is not defined
    - is_vmbr0_modified_in_interfaces.rc != 0 or is_vmbr0B_present_in_interfaces.rc != 0
