- name: "Declare all variables"
  set_fact:
    file_sno_type_prefix: "{{ '%02d' | format(pretask_taskandtaskcondition_message_sno | int) }}-Task_Condition:"
    section_name: "`ISO Images`"
    required_packages:
      - curl
      - aria2
      - expect
    package_check_results: null
    missing_packages: []
    virtio_iso_link: null
    virtio_iso_parentdir: null
    virtio_iso_of_specific_version_exists: null
    filtered_iso_files: []
  changed_when: false

- name: "{{ file_sno_type_prefix }} 001: {{ section_name }}, Filter out already installed packages"
  set_fact:
    required_packages: "{{ required_packages | difference(already_installed_packages) }}"

- name: "{{ file_sno_type_prefix }} 002: {{ section_name }}, Check if required packages are installed"
  command: "dpkg-query -W -f='${Package} ${Status}\n' {{ required_packages | join(' ') }}"
  register: package_check_results
  ignore_errors: yes
  changed_when: false
  failed_when: false
  when: required_packages is defined and required_packages | length > 0

- name: "{{ file_sno_type_prefix }} 003: {{ section_name }}, Collect missing packages from stdout"
  set_fact:
    missing_packages: "{{ missing_packages + [item.0] }}"
  loop: "{{ package_check_results.stdout_lines | map('split', ' ') | map('list') | list }}"
  when: 
    - required_packages is defined and required_packages | length > 0
    - "item[1] != 'install' or item[2] != 'ok' or item[3] != 'installed'"

- name: "{{ file_sno_type_prefix }} 004: {{ section_name }}, Collect missing packages from stderr"
  set_fact:
    missing_packages: "{{ missing_packages + [item.split(' ')[-1]] }}"
  loop: "{{ package_check_results.stderr_lines }}"
  when: 
    - required_packages is defined and required_packages | length > 0
    - "'no packages found matching' in item"

- name: "{{ file_sno_type_prefix }} 005: {{ section_name }}, Add already installed packages and remove duplicates"
  set_fact:
    already_installed_packages: "{{ (already_installed_packages + (required_packages | difference(missing_packages))) | unique }}"
  when: 
    - required_packages is defined and required_packages | length > 0

- name: "{{ file_sno_type_prefix }} 006: {{ section_name }}, Install missing required packages"
  apt:
    name: "{{ missing_packages }}"
    state: present
  when: missing_packages is defined and missing_packages | length > 0

# For when the `missing_packages` are installed
- name: "{{ file_sno_type_prefix }} 007: {{ section_name }}, Add new installed packages and remove duplicates"
  set_fact:
    already_installed_packages: "{{ (already_installed_packages + missing_packages) | unique }}"
  when: missing_packages is defined and missing_packages | length > 0

- name: "{{ file_sno_type_prefix }} 008: {{ section_name }}, Extract `VirtIO.iso` link from a webpage"
  shell: |
    curl -s https://pve.proxmox.com/wiki/Windows_VirtIO_Drivers | \
    grep -Pzo '(?s)<h2><span[^>]*>Installation</span></h2>.*?<h3><span[^>]*>Using the ISO</span></h3>.*?<a[^>]*href="([^"]*)"[^>]*>download the latest stable</a>' | \
    grep -Pzo 'https?://[^"]+' | tr -d '\0'
  register: virtio_iso_link
  changed_when: false

- name: "{{ file_sno_type_prefix }} 009: {{ section_name }}, Run curl -I to get the details of the file from the link of `VirtIO.iso`"
  shell: |
    curl -I "{{ virtio_iso_link.stdout }}" | grep -o 'Location:.*' | grep -Po '[^/]+(?=/[^/]+$)'
  register: virtio_iso_parentdir
  changed_when: false

- name: "{{ file_sno_type_prefix }} 010: {{ section_name }}, Check if specific version of the `VirtIO.iso` file exists"
  stat:
    path: /var/lib/vz/template/iso/{{ virtio_iso_parentdir.stdout }}.iso
  register: virtio_iso_of_specific_version_exists

- name: "{{ file_sno_type_prefix }} 011: {{ section_name }}, Get remote ISO files size"
  uri:
    url: "{{ item.url }}"
    method: HEAD
  register: remote_head_results
  loop: "{{ iso_files_to_download }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ file_sno_type_prefix }} 012: {{ section_name }}, Get local files stat"
  stat:
    path: "/var/lib/vz/template/iso/{{ item.name }}"
  register: local_stat_results
  loop: "{{ iso_files_to_download }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ file_sno_type_prefix }} 013: {{ section_name }}, Filter iso_files_to_download where size doesn't match or file is missing"
  set_fact:
    filtered_iso_files: >-
      {{
        filtered_iso_files + [iso_files_to_download[item_index]]
        if (not local_stat_results.results[item_index].stat.exists)
        or (remote_head_results.results[item_index].content_length | int != local_stat_results.results[item_index].stat.size | default(0))
        else filtered_iso_files
      }}
  loop: "{{ range(0, iso_files_to_download | length) | list }}"
  loop_control:
    loop_var: item_index

- name: "{{ file_sno_type_prefix }} 014: {{ section_name }}, Set `is_condition_iso_images` based on conditions"
  set_fact:
    is_condition_iso_images: true
  when: not virtio_iso_of_specific_version_exists.stat.exists or (filtered_iso_files | length > 0)
