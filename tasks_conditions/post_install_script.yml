- name: "Declare all variables"
  set_fact:
    file_sno_type_prefix: "{{ '%02d' | format(pretask_taskandtaskcondition_message_sno | int) }}-Task_Condition:"
    section_name: "`Post Install`"
    latest_datetime_task: null
    required_packages:
      - wget
      - expect
    package_check_results: null
    missing_packages: []
  changed_when: false

- name: "{{ file_sno_type_prefix }} 001: {{ section_name }}, Check if `precalculated_post_pve_install_sh_sha1_checksum` is defined and not empty"
  fail:
    msg: "The variable 'precalculated_post_pve_install_sh_sha1_checksum' is not defined or is empty."
  when: precalculated_post_pve_install_sh_sha1_checksum is not defined or precalculated_post_pve_install_sh_sha1_checksum == '' or precalculated_post_pve_install_sh_sha1_checksum is none

- name: "{{ file_sno_type_prefix }} 002: {{ section_name }}, Check if `precalculated_post_pve_install_sh_sha1_checksum` length is 40"
  fail:
    msg: "The variable 'precalculated_post_pve_install_sh_sha1_checksum' value: '{{ precalculated_post_pve_install_sh_sha1_checksum }}' is not a valid value."
  when: precalculated_post_pve_install_sh_sha1_checksum | length != 40

- name: "{{ file_sno_type_prefix }} 003: {{ section_name }}, Get the latest run file if exits"
  shell: ls -1r /root/proxmox_automation_install/task_post_install_script_*.run.tmp | head -n 1 | grep -oP "[^_]_\K[0-9]{8}-[0-9]{6}"
  register: latest_datetime_task
  ignore_errors: yes
  changed_when: false
  failed_when: false

- name: "{{ file_sno_type_prefix }} 004: {{ section_name }}, Filter out already installed packages"
  set_fact:
    required_packages: "{{ required_packages | difference(already_installed_packages) }}"

- name: "{{ file_sno_type_prefix }} 005: {{ section_name }}, Check if required packages are installed"
  command: "dpkg-query -W -f='${Package} ${Status}\n' {{ required_packages | join(' ') }}"
  register: package_check_results
  ignore_errors: yes
  changed_when: false
  failed_when: false
  when: 
    - latest_datetime_task.rc != 0
    - required_packages is defined and required_packages | length > 0

- name: "{{ file_sno_type_prefix }} 006: {{ section_name }}, Collect missing packages from stdout"
  set_fact:
    missing_packages: "{{ missing_packages + [item.0] }}"
  loop: "{{ package_check_results.stdout_lines | map('split', ' ') | map('list') | list }}"
  when: 
    - latest_datetime_task.rc != 0
    - required_packages is defined and required_packages | length > 0
    - "item[1] != 'install' or item[2] != 'ok' or item[3] != 'installed'"

- name: "{{ file_sno_type_prefix }} 007: {{ section_name }}, Collect missing packages from stderr"
  set_fact:
    missing_packages: "{{ missing_packages + [item.split(' ')[-1]] }}"
  loop: "{{ package_check_results.stderr_lines }}"
  when: 
    - latest_datetime_task.rc != 0
    - required_packages is defined and required_packages | length > 0
    - "'no packages found matching' in item"

- name: "{{ file_sno_type_prefix }} 008: {{ section_name }}, Add already installed packages and remove duplicates"
  set_fact:
    already_installed_packages: "{{ (already_installed_packages + (required_packages | difference(missing_packages))) | unique }}"
  when: 
    - required_packages is defined and required_packages | length > 0

- name: "{{ file_sno_type_prefix }} 009: {{ section_name }}, Update and upgrade the system even if it fails half way, so as to install packages below"
  apt:
    update_cache: yes
  changed_when: false
  failed_when: false
  when: 
    - latest_datetime_task.rc != 0
    - missing_packages is defined and missing_packages | length > 0

- name: "{{ file_sno_type_prefix }} 010: {{ section_name }}, Install missing required packages"
  apt:
    name: "{{ missing_packages }}"
    state: present
  when: 
    - latest_datetime_task.rc != 0
    - missing_packages is defined and missing_packages | length > 0

# For when the `missing_packages` are installed
- name: "{{ file_sno_type_prefix }} 011: {{ section_name }}, Add new installed packages and remove duplicates"
  set_fact:
    already_installed_packages: "{{ (already_installed_packages + missing_packages) | unique }}"
  when: 
    - latest_datetime_task.rc != 0
    - missing_packages is defined and missing_packages | length > 0

- name: "{{ file_sno_type_prefix }} 012: {{ section_name }}, Set `is_condition_post_install_script` based on conditions"
  set_fact:
    is_condition_post_install_script: true
  when: latest_datetime_task.rc != 0
